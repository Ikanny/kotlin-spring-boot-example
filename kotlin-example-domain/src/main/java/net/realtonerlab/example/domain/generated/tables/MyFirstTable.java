/*
 * This file is generated by jOOQ.
*/
package net.realtonerlab.example.domain.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.realtonerlab.example.domain.generated.DefaultSchema;
import net.realtonerlab.example.domain.generated.Keys;
import net.realtonerlab.example.domain.generated.tables.records.MyFirstTableRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MyFirstTable extends TableImpl<MyFirstTableRecord> {

    private static final long serialVersionUID = 1275099967;

    /**
     * The reference instance of <code>my_first_table</code>
     */
    public static final MyFirstTable MY_FIRST_TABLE = new MyFirstTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MyFirstTableRecord> getRecordType() {
        return MyFirstTableRecord.class;
    }

    /**
     * The column <code>my_first_table.id</code>.
     */
    public final TableField<MyFirstTableRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_AA5E0672_5358_46F8_A287_E410CCCAE8EB)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>my_first_table.name</code>.
     */
    public final TableField<MyFirstTableRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>my_first_table.createdat</code>.
     */
    public final TableField<MyFirstTableRecord, Timestamp> CREATEDAT = createField("createdat", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("NOW()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>my_first_table</code> table reference
     */
    public MyFirstTable() {
        this("my_first_table", null);
    }

    /**
     * Create an aliased <code>my_first_table</code> table reference
     */
    public MyFirstTable(String alias) {
        this(alias, MY_FIRST_TABLE);
    }

    private MyFirstTable(String alias, Table<MyFirstTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private MyFirstTable(String alias, Table<MyFirstTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MyFirstTableRecord, Long> getIdentity() {
        return Keys.IDENTITY_MY_FIRST_TABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MyFirstTableRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MyFirstTableRecord>> getKeys() {
        return Arrays.<UniqueKey<MyFirstTableRecord>>asList(Keys.CONSTRAINT_4);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MyFirstTable as(String alias) {
        return new MyFirstTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MyFirstTable rename(String name) {
        return new MyFirstTable(name, null);
    }
}
